import logging
import aiohttp
from homeassistant.components import mqtt
from homeassistant.components import conversation
from homeassistant.helpers import intent

_LOGGER = logging.getLogger(__name__)

class VBotConversationAgent(conversation.AbstractConversationAgent):
    def __init__(self, hass, entry, device_id: str):
        self.hass = hass
        self.entry = entry
        self.device_id = device_id
        self.base_url = entry.data.get("vbot_url_api")  # ‚úÖ L·∫•y URL API t·ª´ config

    @property
    def supported_languages(self) -> list[str]:
        return ["vi"]

    async def async_process(self, user_input: conversation.ConversationInput) -> conversation.ConversationResult:
        message = user_input.text or "Kh√¥ng c√≥ ƒë·∫ßu v√†o"

        # üß† L·∫•y ch·∫ø ƒë·ªô x·ª≠ l√Ω: chatbot_processing / main_processing
        mode_entity_id = f"select.assist_tac_nhan_che_do_xu_ly_{self.device_id.lower()}"
        mode_state = self.hass.states.get(mode_entity_id)
        processing_mode = mode_state.state if mode_state else "chatbot_processing"

        # üß† L·∫•y lu·ªìng x·ª≠ l√Ω: api / mqtt
        stream_entity_id = f"select.assist_tac_nhan_luong_xu_ly_{self.device_id.lower()}"
        stream_state = self.hass.states.get(stream_entity_id)
        processing_stream = stream_state.state if stream_state else "mqtt"

        # üîç Chu·∫©n h√≥a l·∫°i ch·∫ø ƒë·ªô x·ª≠ l√Ω: "chatbot" / "processing"
        vbot_mode = "chatbot" if "chatbot" in processing_mode else "processing"
        data_value = "main_processing" if "main" in processing_mode else "chatbot_processing"

        intent_response = intent.IntentResponse(language=user_input.language)

        try:
            if processing_stream == "mqtt":
                # üì° G·ª≠i qua MQTT
                topic = f"{self.device_id}/script/{processing_mode}/set"
                await mqtt.async_publish(self.hass, topic, message, qos=1, retain=False)
                _LOGGER.info(f"[VBot] G·ª≠i MQTT t·ªõi {topic}: {message}")
                response_text = f"ƒê√£ g·ª≠i l·ªánh qua MQTT - ch·∫ø ƒë·ªô: {processing_mode}."

            elif processing_stream == "api":
                # üåê G·ª≠i qua API
                url = f"{self.base_url}/"
                payload = {
                    "type": 3,
                    "data": data_value,
                    "action": vbot_mode,
                    "value": message
                }
                headers = {
                    "Content-Type": "application/json"
                }

                async with aiohttp.ClientSession() as session:
                    async with session.post(url, json=payload, headers=headers) as resp:
                        if resp.status == 200:
                            data = await resp.json()
                            response_text = data.get("response", "Ph·∫£n h·ªìi th√†nh c√¥ng.")
                        else:
                            response_text = f"L·ªói API: HTTP {resp.status}"

                _LOGGER.info(f"[VBot] G·ª≠i API t·ªõi {url} v·ªõi payload: {payload}")

            else:
                raise ValueError(f"Lu·ªìng x·ª≠ l√Ω kh√¥ng h·ª£p l·ªá: {processing_stream}")

        except Exception as e:
            _LOGGER.error(f"[VBot] L·ªói khi g·ª≠i l·ªánh: {e}")
            response_text = "Kh√¥ng th·ªÉ g·ª≠i l·ªánh t·ªõi thi·∫øt b·ªã."

        # üîÅ Tr·∫£ l·∫°i k·∫øt qu·∫£ cho Assist
        intent_response.async_set_speech(response_text)
        intent_response.async_set_card({
            "title": "VBot Assistant",
            "content": response_text
        })

        return conversation.ConversationResult(
            response=intent_response,
            conversation_id=user_input.conversation_id
        )
